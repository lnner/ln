日新月异的前端技术已经让前端代码的逻辑和交互效果越来越复杂，更加的不易于管理，模块化开发和预处理框架把项目分成若干个小模块，增加了最后发布的困难，没有一个统一的标准，让前端的项目结构千奇百怪。前端自动化构建在整个项目开发中越来越重要。

项目大概流程：
①首先要确定这个项目要使用什么样的技术来实现，然后开始规划我们的项目目录，接着就要往项目增加第三方库依赖
② 然后，进行编码
③ 编码完成，进行语法检查，文件合并和压缩

在这个过程中会遭遇很多重复性的操作，所以诞生了自动构建工具
目前我node构建本地的开发环境，自动构建工具用webpack。
webpack，一个模块打包的工具，它的作用是把互相依赖的模块处理成静态资源。将你的应用打包为多个文件. 如果你的单页面应用有多个页面, 那么用户只从下载对应页面的代码. 当他么访问到另一个页面, 他们不需要重新下载通用的代码.

webpack.config.js是webpack的配置文件，webpack需要编写一个config文件，然后根据这个文件来执行需要的打包功能。

引入加载器，加载器（打包）是对你的应用的源文件进行转换的工具。不同类型的文件有不同的加载器，比如jsx,es6要用到babel-loader,加载css要用到css-loader,加载html要用到html-loader，以及 vue-loader，css-loader 等等. 

所有的loader都放在module下面的loaders里边.通常有以下内容：

①test:是对该类文件的正则表达式，用来判断采用这个loader的条件 

②exclude是排除的目录,比如node_modules中的文件，通常都是编译好的js，可以直接加载，因此为了优化打包速度，可以排除。作为优化手段它不是必须的 

③loader: 加载器的名称，每一个加载器都有属于它自己的用法，具体要参考官方说明

④query:传递给加载器的附加参数或配置信息，有些也可以通过在根目录下生成特殊的文件来单独配置，比如.babelrc 